import pandas as pd

# 定義題目數據

quiz_data = [
    {
        'id': 1,
        'question': '在Python中，以下哪個庫主要用於數據分析和處理？',
        'option_a': 'NumPy',
        'option_b': 'Pandas',
        'option_c': 'Matplotlib',
        'answer': 'b',
        'category': 'Pandas',
        'difficulty': '簡單',
        'knowledge_point': 'Python數據分析庫',
        'question_type': '概念題',
        'chapter': '數據分析導論',
        'explanation': 'Pandas是Python中主要用於數據分析和處理的庫，它提供了高效的DataFrame和Series數據結構，以及豐富的數據操作功能。NumPy主要用於科學計算和數組操作，Matplotlib主要用於數據可視化。'
    },
    {
        'id': 2,
        'question': '在NumPy中，以下哪個函數用於創建一個全為0的數組？',
        'option_a': 'np.zeros()',
        'option_b': 'np.empty()',
        'option_c': 'np.ones()',
        'answer': 'a',
        'category': 'NumPy',
        'difficulty': '簡單',
        'knowledge_point': 'NumPy數組創建',
        'question_type': '函數應用題',
        'chapter': 'NumPy基礎',
        'explanation': 'np.zeros()函數用於創建一個全為0的數組。np.empty()創建一個未初始化的數組，其初始值取決於內存的狀態。np.ones()創建一個全為1的數組。'
    },
    {
        'id': 3,
        'question': '以下Python代碼的輸出是什麼？\n\nprint([1, 2, 3] + [4, 5, 6])',
        'option_a': '[1, 2, 3, 4, 5, 6]',
        'option_b': '[5, 7, 9]',
        'option_c': '錯誤',
        'answer': 'a',
        'category': 'Python基礎',
        'difficulty': '簡單',
        'knowledge_point': '列表操作',
        'question_type': '代碼執行題',
        'chapter': '數據結構',
        'explanation': '在Python中，使用加號(+)對兩個列表進行操作會將它們連接起來，而不是進行元素相加。因此[1, 2, 3] + [4, 5, 6]的結果是[1, 2, 3, 4, 5, 6]。'
    },
    {
        'id': 4,
        'question': '在Pandas中，以下哪個方法用於處理重複數據？',
        'option_a': 'drop_duplicates()',
        'option_b': 'remove_duplicates()',
        'option_c': 'delete_duplicates()',
        'answer': 'a',
        'category': 'Pandas',
        'difficulty': '簡單',
        'knowledge_point': 'Pandas數據清洗',
        'question_type': '函數應用題',
        'chapter': 'Pandas數據清洗',
        'explanation': 'Pandas中用於處理重複數據的方法是drop_duplicates()，它可以刪除DataFrame或Series中的重複行。remove_duplicates()和delete_duplicates()不是Pandas的標準方法。'
    },
    {
        'id': 5,
        'question': '以下哪個不是Python的基本數據類型？',
        'option_a': 'int',
        'option_b': 'float',
        'option_c': 'array',
        'answer': 'c',
        'category': 'Python基礎',
        'difficulty': '簡單',
        'knowledge_point': 'Python數據類型',
        'question_type': '概念題',
        'chapter': 'Python基礎',
        'explanation': 'array不是Python的基本數據類型，它是NumPy庫中的數據類型。Python的基本數據類型包括int（整數）、float（浮點數）、bool（布爾值）、str（字符串）、list（列表）、tuple（元組）、dict（字典）和set（集合）等。'
    },
    {
        'id': 6,
        'question': '在Matplotlib中，以下哪個函數用於創建一個新的圖形？',
        'option_a': 'plt.figure()',
        'option_b': 'plt.plot()',
        'option_c': 'plt.draw()',
        'answer': 'a',
        'category': '資料視覺化',
        'difficulty': '簡單',
        'knowledge_point': 'Matplotlib基本操作',
        'question_type': '函數應用題',
        'chapter': 'Matplotlib基礎',
        'explanation': 'plt.figure()用於創建一個新的圖形。plt.plot()用於在當前圖形上繪製數據，而plt.draw()用於更新圖形顯示。'
    },
    {
        'id': 7,
        'question': '以下NumPy代碼的輸出是什麼？\n\nimport numpy as np\nprint(np.array([1, 2, 3]) * 2)',
        'option_a': '[1, 2, 3, 1, 2, 3]',
        'option_b': '[2, 4, 6]',
        'option_c': '[[1, 2, 3], [1, 2, 3]]',
        'answer': 'b',
        'category': 'NumPy',
        'difficulty': '簡單',
        'knowledge_point': 'NumPy數組操作',
        'question_type': '代碼執行題',
        'chapter': 'NumPy數組操作',
        'explanation': 'NumPy數組與標量相乘時，會對數組中的每個元素進行乘法操作。因此np.array([1, 2, 3]) * 2的結果是[2, 4, 6]。'
    },
    {
        'id': 8,
        'question': '在Pandas中，以下哪個方法用於選擇DataFrame的列？',
        'option_a': 'df.loc[]',
        'option_b': 'df.iloc[]',
        'option_c': 'df[]',
        'answer': 'c',
        'category': 'Pandas',
        'difficulty': '簡單',
        'knowledge_point': 'Pandas數據訪問',
        'question_type': '函數應用題',
        'chapter': 'Pandas數據訪問',
        'explanation': '在Pandas中，使用df[]可以選擇DataFrame的列。df.loc[]用於基於標籤的索引，df.iloc[]用於基於位置的索引，兩者都可以用於選擇行和列。'
    },
    {
        'id': 9,
        'question': '以下Python代碼的輸出是什麼？\n\nprint(list(range(5)))',
        'option_a': '[0, 1, 2, 3, 4]',
        'option_b': '[1, 2, 3, 4, 5]',
        'option_c': '[0, 1, 2, 3, 4, 5]',
        'answer': 'a',
        'category': 'Python基礎',
        'difficulty': '簡單',
        'knowledge_point': 'range函數',
        'question_type': '代碼執行題',
        'chapter': '控制流',
        'explanation': 'range(5)生成一個從0開始，不包括5的整數序列，即0, 1, 2, 3, 4。list()函數將這個序列轉換為列表，因此結果是[0, 1, 2, 3, 4]。'
    },
    {
        'id': 10,
        'question': '在數據分析中，以下哪個圖表最適合顯示數據的分布情況？',
        'option_a': '折線圖',
        'option_b': '直方圖',
        'option_c': '散點圖',
        'answer': 'b',
        'category': '資料視覺化',
        'difficulty': '簡單',
        'knowledge_point': '數據可視化選擇',
        'question_type': '概念題',
        'chapter': '數據可視化基礎',
        'explanation': '直方圖是顯示數據分布情況的最佳圖表類型，它將數據分成若干個區間（bin），並顯示每個區間內的數據頻率。折線圖主要用於顯示數據隨時間的變化趨勢，散點圖主要用於顯示兩個變量之間的關係。'
    },
    {
        'id': 11,
        'question': '以下Pandas代碼的輸出是什麼？\n\nimport pandas as pd\ndf = pd.DataFrame({"A": [1, 2], "B": [3, 4]})\nprint(df.shape)',
        'option_a': '(2, 2)',
        'option_b': '(2, 3)',
        'option_c': '(3, 2)',
        'answer': 'a',
        'category': 'Pandas',
        'difficulty': '中等',
        'knowledge_point': 'Pandas數據結構',
        'question_type': '代碼執行題',
        'chapter': 'Pandas基礎',
        'explanation': 'df.shape返回DataFrame的形狀，即(行數, 列數)。在這個例子中，DataFrame有2行2列，所以shape是(2, 2)。'
    },
    {
        'id': 12,
        'question': '在Python中，以下哪個語句用於導入模塊？',
        'option_a': 'include numpy as np',
        'option_b': 'import numpy as np',
        'option_c': 'using numpy as np',
        'answer': 'b',
        'category': 'Python基礎',
        'difficulty': '簡單',
        'knowledge_point': '模塊導入',
        'question_type': '語法題',
        'chapter': 'Python基礎',
        'explanation': '在Python中，使用import語句導入模塊，例如import numpy as np。include和using不是Python中用於導入模塊的關鍵字。'
    },
    {
        'id': 13,
        'question': '以下NumPy代碼的輸出是什麼？\n\nimport numpy as np\na = np.array([1, 2, 3])\nb = np.array([4, 5, 6])\nprint(a + b)',
        'option_a': '[1, 2, 3, 4, 5, 6]',
        'option_b': '[5, 7, 9]',
        'option_c': '[[1, 2, 3], [4, 5, 6]]',
        'answer': 'b',
        'category': 'NumPy',
        'difficulty': '中等',
        'knowledge_point': 'NumPy數組操作',
        'question_type': '代碼執行題',
        'chapter': 'NumPy數組操作',
        'explanation': 'NumPy數組相加時，會對應位置的元素相加。因此a + b的結果是[1+4, 2+5, 3+6]，即[5, 7, 9]。'
    },
    {
        'id': 14,
        'question': '在Pandas中，以下哪個方法用於按指定列對DataFrame進行排序？',
        'option_a': 'df.sort()',
        'option_b': 'df.sort_values()',
        'option_c': 'df.order()',
        'answer': 'b',
        'category': 'Pandas',
        'difficulty': '中等',
        'knowledge_point': 'Pandas數據操作',
        'question_type': '函數應用題',
        'chapter': 'Pandas數據處理',
        'explanation': 'df.sort_values()用於按指定列對DataFrame進行排序。df.sort()是舊版本的方法，已被棄用，df.order()不是Pandas的標準方法。'
    },
    {
        'id': 15,
        'question': '以下Python代碼的輸出是什麼？\n\nprint({1, 2, 2, 3, 3, 3})',
        'option_a': '{1, 2, 2, 3, 3, 3}',
        'option_b': '{1, 2, 3}',
        'option_c': '[1, 2, 3]',
        'answer': 'b',
        'category': 'Python基礎',
        'difficulty': '中等',
        'knowledge_point': '集合',
        'question_type': '代碼執行題',
        'chapter': '數據結構',
        'explanation': '在Python中，集合（set）是一種無序且不重複的數據結構。當創建集合時，重複的元素會被自動去除。因此{1, 2, 2, 3, 3, 3}會被簡化為{1, 2, 3}。'
    },
    {
        'id': 16,
        'question': '在Matplotlib中，以下哪個函數用於設置圖形的標題？',
        'option_a': 'plt.title()',
        'option_b': 'plt.heading()',
        'option_c': 'plt.name()',
        'answer': 'a',
        'category': '資料視覺化',
        'difficulty': '中等',
        'knowledge_point': 'Matplotlib圖形設置',
        'question_type': '函數應用題',
        'chapter': 'Matplotlib基礎',
        'explanation': 'plt.title()用於設置圖形的標題。plt.heading()和plt.name()不是Matplotlib的標準函數。'
    },
    {
        'id': 17,
        'question': '以下NumPy代碼的輸出是什麼？\n\nimport numpy as np\nprint(np.mean([1, 2, 3, 4, 5]))',
        'option_a': '2',
        'option_b': '2.5',
        'option_c': '3',
        'answer': 'c',
        'category': 'NumPy',
        'difficulty': '中等',
        'knowledge_point': 'NumPy統計函數',
        'question_type': '代碼執行題',
        'chapter': 'NumPy統計操作',
        'explanation': 'np.mean()計算數組的平均值。[1, 2, 3, 4, 5]的平均值是(1+2+3+4+5)/5 = 15/5 = 3。'
    },
    {
        'id': 18,
        'question': '在Pandas中，以下哪個方法用於連接兩個DataFrame？',
        'option_a': 'pd.concat()',
        'option_b': 'pd.join()',
        'option_c': 'pd.merge()',
        'answer': 'a',
        'category': 'Pandas',
        'difficulty': '中等',
        'knowledge_point': 'Pandas數據組合',
        'question_type': '函數應用題',
        'chapter': 'Pandas數據組合',
        'explanation': 'pd.concat()用於連接兩個或多個DataFrame，可以按行（axis=0）或按列（axis=1）連接。pd.join()用於基於索引的連接，pd.merge()用於基於列的連接。'
    },
    {
        'id': 19,
        'question': '以下Python代碼的輸出是什麼？\n\nprint("Hello"[1:4])',
        'option_a': 'Hell',
        'option_b': 'ello',
        'option_c': 'ell',
        'answer': 'c',
        'category': 'Python基礎',
        'difficulty': '中等',
        'knowledge_point': '字符串切片',
        'question_type': '代碼執行題',
        'chapter': '數據結構',
        'explanation': '在Python中，字符串切片[1:4]表示從索引1（包括）到索引4（不包括）的子字符串。"Hello"的索引1是"e"，索引2是"l"，索引3是"l"，所以"Hello"[1:4]是"ell"。'
    },
    {
        'id': 20,
        'question': '在數據分析中，以下哪個術語表示數據中的異常值？',
        'option_a': 'Outlier',
        'option_b': 'Missing value',
        'option_c': 'Duplicate',
        'answer': 'a',
        'category': '數據分析概念',
        'difficulty': '中等',
        'knowledge_point': '數據質量',
        'question_type': '概念題',
        'chapter': '數據預處理',
        'explanation': 'Outlier（異常值）是指與其他數據點顯著不同的數據點，通常是極端值或不符合總體分布的值。Missing value（缺失值）是指數據中的空值或未記錄的值，Duplicate（重複值）是指數據中重複出現的記錄。'
    },
    {
        'id': 21,
        'question': '以下Pandas代碼的輸出是什麼？\n\nimport pandas as pd\ndf = pd.DataFrame({"A": [1, 2, 3], "B": [4, 5, 6]})\nprint(df["A"].sum())',
        'option_a': '6',
        'option_b': '15',
        'option_c': '21',
        'answer': 'a',
        'category': 'Pandas',
        'difficulty': '困難',
        'knowledge_point': 'Pandas數據分析',
        'question_type': '代碼執行題',
        'chapter': 'Pandas數據處理',
        'explanation': 'df["A"]選擇DataFrame的A列，返回一個Series。Series的sum()方法計算所有元素的和。A列的元素是[1, 2, 3]，它們的和是1+2+3=6。'
    },
    {
        'id': 22,
        'question': '在Python中，以下哪個是正確的列表推導式？',
        'option_a': '[x for x in range(5)]',
        'option_b': '[for x in range(5)]',
        'option_c': '[x in range(5)]',
        'answer': 'a',
        'category': 'Python基礎',
        'difficulty': '困難',
        'knowledge_point': '列表推導式',
        'question_type': '語法題',
        'chapter': '高級數據結構',
        'explanation': '正確的列表推導式語法是[表達式 for 變量 in 可迭代對象]。因此[x for x in range(5)]是正確的，它生成一個包含0到4的列表。'
    },
    {
        'id': 23,
        'question': '以下NumPy代碼的輸出是什麼？\n\nimport numpy as np\na = np.array([[1, 2], [3, 4]])\nprint(a.T)',
        'option_a': '[[1, 3], [2, 4]]',
        'option_b': '[[1, 2], [3, 4]]',
        'option_c': '[[4, 2], [3, 1]]',
        'answer': 'a',
        'category': 'NumPy',
        'difficulty': '困難',
        'knowledge_point': 'NumPy矩陣操作',
        'question_type': '代碼執行題',
        'chapter': 'NumPy數組操作',
        'explanation': 'a.T返回數組a的轉置。轉置操作將行變為列，列變為行。原數組a是[[1, 2], [3, 4]]，轉置後變為[[1, 3], [2, 4]]。'
    },
    {
        'id': 24,
        'question': '在Pandas中，以下哪個方法用於將時間字符串轉換為datetime對象？',
        'option_a': 'pd.to_datetime()',
        'option_b': 'pd.as_datetime()',
        'option_c': 'pd.convert_datetime()',
        'answer': 'a',
        'category': 'Pandas',
        'difficulty': '困難',
        'knowledge_point': 'Pandas時間序列',
        'question_type': '函數應用題',
        'chapter': 'Pandas時間序列',
        'explanation': 'pd.to_datetime()用於將時間字符串轉換為datetime對象。pd.as_datetime()和pd.convert_datetime()不是Pandas的標準方法。'
    },
    {
        'id': 25,
        'question': '以下Python代碼的輸出是什麼？\n\ndef func(a, b=1, *args, **kwargs):\n    print(a, b, args, kwargs)\n\nfunc(1, 2, 3, 4, x=5, y=6)',
        'option_a': '1 2 (3, 4) {\'x\': 5, \'y\': 6}',
        'option_b': '1 2 3 4 {\'x\': 5, \'y\': 6}',
        'option_c': '1 2 (3, 4, 5, 6) {}',
        'answer': 'a',
        'category': 'Python基礎',
        'difficulty': '困難',
        'knowledge_point': '函數參數',
        'question_type': '代碼執行題',
        'chapter': '函數進階',
        'explanation': '在這個函數調用中，a=1, b=2, args=(3, 4), kwargs={\'x\': 5, \'y\': 6}。*args收集多餘的位置參數，**kwargs收集多餘的關鍵字參數。'
    },
    {
        'id': 26,
        'question': '在Matplotlib中，以下哪個函數用於繪製柱狀圖？',
        'option_a': 'plt.bar()',
        'option_b': 'plt.hist()',
        'option_c': 'plt.barplot()',
        'answer': 'a',
        'category': '資料視覺化',
        'difficulty': '困難',
        'knowledge_point': 'Matplotlib繪圖函數',
        'question_type': '函數應用題',
        'chapter': 'Matplotlib繪圖',
        'explanation': 'plt.bar()用於繪製柱狀圖。plt.hist()用於繪製直方圖，plt.barplot()不是Matplotlib的標準函數。'
    },
    {
        'id': 27,
        'question': '以下NumPy代碼的輸出是什麼？\n\nimport numpy as np\na = np.array([1, 2, 3, 4, 5])\nprint(a[1:5:2])',
        'option_a': '[2, 4]',
        'option_b': '[2, 3, 4]',
        'option_c': '[2, 4, 6]',
        'answer': 'a',
        'category': 'NumPy',
        'difficulty': '困難',
        'knowledge_point': 'NumPy索引',
        'question_type': '代碼執行題',
        'chapter': 'NumPy數據訪問',
        'explanation': 'a[1:5:2]表示從索引1（包括）到索引5（不包括）每隔2個元素選取一個元素。因此選取的元素是索引1的2和索引3的4，結果是[2, 4]。'
    },
    {
        'id': 28,
        'question': '在Pandas中，以下哪個方法用於計算DataFrame中每列的描述性統計量？',
        'option_a': 'df.stats()',
        'option_b': 'df.describe()',
        'option_c': 'df.summary()',
        'answer': 'b',
        'category': 'Pandas',
        'difficulty': '困難',
        'knowledge_point': 'Pandas統計分析',
        'question_type': '函數應用題',
        'chapter': 'Pandas統計分析',
        'explanation': 'df.describe()用於計算DataFrame中每列的描述性統計量，包括計數、平均值、標準差、最小值、四分位數和最大值。df.stats()和df.summary()不是Pandas的標準方法。'
    },
    {
        'id': 29,
        'question': '以下Python代碼的輸出是什麼？\n\nprint(dict([(\'a\', 1), (\'b\', 2)]))',
        'option_a': '{\'a\': 1, \'b\': 2}',
        'option_b': '[(\'a\', 1), (\'b\', 2)]',
        'option_c': '{1: \'a\', 2: \'b\'}',
        'answer': 'a',
        'category': 'Python基礎',
        'difficulty': '困難',
        'knowledge_point': '字典創建',
        'question_type': '代碼執行題',
        'chapter': '數據結構',
        'explanation': 'dict()函數可以從鍵值對列表創建字典。在這個例子中，[(\'a\', 1), (\'b\', 2)]是一個包含兩個元組的列表，每個元組是一個鍵值對。因此，結果是{\'a\': 1, \'b\': 2}。'
    },
    {
        'id': 30,
        'question': '在數據分析中，以下哪個步驟通常在特徵選擇之前進行？',
        'option_a': '模型訓練',
        'option_b': '數據清洗',
        'option_c': '模型評估',
        'answer': 'b',
        'category': '數據分析概念',
        'difficulty': '困難',
        'knowledge_point': '數據分析流程',
        'question_type': '概念題',
        'chapter': '數據分析導論',
        'explanation': '在數據分析流程中，數據清洗通常在特徵選擇之前進行。數據清洗包括處理缺失值、異常值和重複數據等，這些步驟是為了確保數據的質量，為後續的特徵選擇和模型訓練提供良好的基礎。'
    },
    {
        'id': 31,
        'question': '在Pandas中，以下哪個函數用於讀取CSV文件？',
        'option_a': 'pd.read_csv()',
        'option_b': 'pd.load_csv()',
        'option_c': 'pd.import_csv()',
        'answer': 'a',
        'category': 'Pandas',
        'difficulty': '簡單',
        'knowledge_point': 'Pandas數據導入',
        'question_type': '函數應用題',
        'chapter': 'Pandas數據導入/導出',
        'explanation': 'pd.read_csv()是Pandas中用於讀取CSV文件的函數。pd.load_csv()和pd.import_csv()不是Pandas的標準函數。'
    },
    {
        'id': 32,
        'question': 'Pandas中的主要數據結構不包括以下哪一個？',
        'option_a': 'Series',
        'option_b': 'DataFrame',
        'option_c': 'Array',
        'answer': 'c',
        'category': 'Pandas',
        'difficulty': '簡單',
        'knowledge_point': 'Pandas基本概念',
        'question_type': '概念題',
        'chapter': 'Pandas基礎',
        'explanation': 'Pandas的主要數據結構是Series和DataFrame。Array是NumPy的數據結構，不是Pandas的主要數據結構。'
    },
    {
        'id': 33,
        'question': '在Matplotlib中，以下哪個函數用於繪製散點圖？',
        'option_a': 'plt.scatter()',
        'option_b': 'plt.plot()',
        'option_c': 'plt.bar()',
        'answer': 'a',
        'category': '資料視覺化',
        'difficulty': '簡單',
        'knowledge_point': 'Matplotlib繪圖函數',
        'question_type': '函數應用題',
        'chapter': 'Matplotlib基礎',
        'explanation': 'plt.scatter()是Matplotlib中用於繪製散點圖的函數。plt.plot()主要用於繪製線圖，plt.bar()用於繪製柱狀圖。'
    },
    {
        'id': 34,
        'question': '在Python中，以下哪個語句用於處理異常？',
        'option_a': 'if-else',
        'option_b': 'for-in',
        'option_c': 'try-except',
        'answer': 'c',
        'category': 'Python基礎',
        'difficulty': '簡單',
        'knowledge_point': '異常處理',
        'question_type': '語法題',
        'chapter': '異常處理',
        'explanation': 'try-except是Python中用於處理異常的語句。try塊包含可能引發異常的代碼，except塊包含處理異常的代碼。if-else用於條件判斷，for-in用於迭代。'
    },
    {
        'id': 35,
        'question': '在Pandas中，以下哪個方法用於處理缺失值？',
        'option_a': 'dropna()',
        'option_b': 'removena()',
        'option_c': 'deletena()',
        'answer': 'a',
        'category': 'Pandas',
        'difficulty': '簡單',
        'knowledge_point': 'Pandas缺失值處理',
        'question_type': '函數應用題',
        'chapter': 'Pandas數據清洗',
        'explanation': 'dropna()是Pandas中用於處理缺失值的方法，它可以刪除包含缺失值的行或列。removena()和deletena()不是Pandas的標準方法。'
    },
    {
        'id': 36,
        'question': '在Python中，以下哪個是列表的方法？',
        'option_a': 'add()',
        'option_b': 'append()',
        'option_c': 'insert()',
        'answer': 'b',
        'category': 'Python基礎',
        'difficulty': '簡單',
        'knowledge_point': '列表方法',
        'question_type': '函數應用題',
        'chapter': '數據結構',
        'explanation': 'append()是Python列表的方法，用於在列表末尾添加一個元素。insert()也是列表的方法，用於在指定位置插入元素，但題目只問哪個是列表的方法，而不是哪些是列表的方法。add()不是列表的方法，而是集合的方法。'
    },
    {
        'id': 37,
        'question': '在Pandas中，以下哪個方法用於對DataFrame進行分組操作？',
        'option_a': 'group()',
        'option_b': 'groupby()',
        'option_c': 'aggregate()',
        'answer': 'b',
        'category': 'Pandas',
        'difficulty': '簡單',
        'knowledge_point': 'Pandas分組操作',
        'question_type': '函數應用題',
        'chapter': 'Pandas數據處理',
        'explanation': 'groupby()是Pandas中用於對DataFrame進行分組操作的方法。group()不是Pandas的標準方法，aggregate()是用於對分組後的數據進行聚合操作的方法。'
    },
    {
        'id': 38,
        'question': '在Python中，以下哪個是字典的正確語法？',
        'option_a': '{key, value}',
        'option_b': '{key: value}',
        'option_c': '[key: value]',
        'answer': 'b',
        'category': 'Python基礎',
        'difficulty': '簡單',
        'knowledge_point': '字典語法',
        'question_type': '語法題',
        'chapter': '數據結構',
        'explanation': '在Python中，字典的正確語法是{key: value}，其中key和value之間用冒號分隔。{key, value}是集合的語法，[key: value]不是有效的Python語法。'
    },
    {
        'id': 39,
        'question': '在Matplotlib中，以下哪個函數用於顯示圖形？',
        'option_a': 'plt.display()',
        'option_b': 'plt.show()',
        'option_c': 'plt.view()',
        'answer': 'b',
        'category': '資料視覺化',
        'difficulty': '簡單',
        'knowledge_point': 'Matplotlib基本操作',
        'question_type': '函數應用題',
        'chapter': 'Matplotlib基礎',
        'explanation': 'plt.show()是Matplotlib中用於顯示圖形的函數。plt.display()和plt.view()不是Matplotlib的標準函數。'
    },
    {
        'id': 40,
        'question': '在NumPy中，以下哪個函數用於計算數組的標準差？',
        'option_a': 'np.std()',
        'option_b': 'np.stdev()',
        'option_c': 'np.standarddev()',
        'answer': 'a',
        'category': 'NumPy',
        'difficulty': '簡單',
        'knowledge_point': 'NumPy統計函數',
        'question_type': '函數應用題',
        'chapter': 'NumPy統計操作',
        'explanation': 'np.std()是NumPy中用於計算數組標準差的函數。np.stdev()和np.standarddev()不是NumPy的標準函數。'
    },
    {
        'id': 41,
        'question': '以下Pandas代碼的輸出是什麼？\n\nimport pandas as pd\ndf = pd.DataFrame({"A": [1, 2, 3], "B": [4, 5, 6]})\nprint(df.loc[1])',
        'option_a': 'A    1\nB    4\nName: 0, dtype: int64',
        'option_b': 'A    2\nB    5\nName: 1, dtype: int64',
        'option_c': '2',
        'answer': 'b',
        'category': 'Pandas',
        'difficulty': '中等',
        'knowledge_point': 'Pandas索引',
        'question_type': '代碼執行題',
        'chapter': 'Pandas數據訪問',
        'explanation': 'df.loc[1]選擇DataFrame中索引為1的行，返回一個Series。在這個例子中，索引1對應的行是A列為2，B列為5的行，所以結果是A    2\nB    5\nName: 1, dtype: int64。'
    },
    {
        'id': 42,
        'question': '以下Python代碼的輸出是什麼？\n\ndata = {"a": 1, "b": 2}\nprint(data.get("c", 3))',
        'option_a': 'None',
        'option_b': '3',
        'option_c': '錯誤',
        'answer': 'b',
        'category': 'Python基礎',
        'difficulty': '中等',
        'knowledge_point': '字典方法',
        'question_type': '代碼執行題',
        'chapter': '數據結構',
        'explanation': 'dict.get(key, default)方法返回字典中key對應的值，如果key不存在，則返回default值。在這個例子中，"c"不在字典中，所以返回默認值3。'
    },
    {
        'id': 43,
        'question': '在Pandas中，以下哪個操作會返回一個新的DataFrame而不修改原始DataFrame？',
        'option_a': 'df.drop("A", axis=1, inplace=True)',
        'option_b': 'df.drop("A", axis=1)',
        'option_c': 'df.pop("A")',
        'answer': 'b',
        'category': 'Pandas',
        'difficulty': '中等',
        'knowledge_point': 'Pandas數據操作',
        'question_type': '概念題',
        'chapter': 'Pandas數據處理',
        'explanation': 'df.drop("A", axis=1)返回一個新的DataFrame，其中不包含A列，但不修改原始DataFrame。df.drop("A", axis=1, inplace=True)直接修改原始DataFrame，不返回新的DataFrame。df.pop("A")也會修改原始DataFrame，並返回被刪除的列。'
    },
    {
        'id': 44,
        'question': '以下Matplotlib代碼會產生什麼類型的圖？\n\nimport matplotlib.pyplot as plt\nplt.plot([1, 2, 3, 4], [1, 4, 9, 16], "ro")',
        'option_a': '紅色折線圖',
        'option_b': '紅色散點圖',
        'option_c': '紅色柱狀圖',
        'answer': 'b',
        'category': '資料視覺化',
        'difficulty': '中等',
        'knowledge_point': 'Matplotlib繪圖風格',
        'question_type': '代碼執行題',
        'chapter': 'Matplotlib繪圖',
        'explanation': 'plt.plot()函數的第三個參數是格式字符串，"ro"表示紅色("r")的圓點("o")，因此這段代碼會產生紅色散點圖。'
    },
    {
        'id': 45,
        'question': '以下NumPy代碼的輸出是什麼？\n\nimport numpy as np\na = np.array([[1, 2], [3, 4]])\nprint(a[:, 0])',
        'option_a': '[1 2]',
        'option_b': '[1 3]',
        'option_c': '[[1], [3]]',
        'answer': 'b',
        'category': 'NumPy',
        'difficulty': '中等',
        'knowledge_point': 'NumPy索引',
        'question_type': '代碼執行題',
        'chapter': 'NumPy數據訪問',
        'explanation': 'a[:, 0]選擇數組a的所有行的第0列。在這個例子中，第0列是[1, 3]，所以結果是[1 3]。'
    },
    {
        'id': 46,
        'question': '在Pandas中，以下哪個方法用於合併兩個DataFrame？',
        'option_a': 'pd.join()',
        'option_b': 'pd.merge()',
        'option_c': 'pd.combine()',
        'answer': 'b',
        'category': 'Pandas',
        'difficulty': '中等',
        'knowledge_point': 'Pandas數據合併',
        'question_type': '函數應用題',
        'chapter': 'Pandas數據組合',
        'explanation': 'pd.merge()是Pandas中用於合併兩個DataFrame的方法，它基於兩個DataFrame中的一個或多個共同列進行合併。pd.join()是基於索引的合併方法，pd.combine()不是Pandas的標準方法。'
    },
    {
        'id': 47,
        'question': '以下Python代碼的輸出是什麼？\n\nprint(sorted([3, 1, 2], key=lambda x: -x))',
        'option_a': '[1, 2, 3]',
        'option_b': '[3, 2, 1]',
        'option_c': '[-3, -2, -1]',
        'answer': 'b',
        'category': 'Python基礎',
        'difficulty': '中等',
        'knowledge_point': '排序與lambda函數',
        'question_type': '代碼執行題',
        'chapter': '函數進階',
        'explanation': 'sorted()函數按照key函數的返回值對列表進行排序。在這個例子中，key函數是lambda x: -x，它返回每個元素的負值。因此，排序時會按照元素的負值從小到大排序，相當於按照元素本身從大到小排序，結果是[3, 2, 1]。'
    },
    {
        'id': 48,
        'question': '在Pandas中，以下哪個是正確的數據透視表(pivot table)操作？',
        'option_a': 'df.pivot(index="A", columns="B", values="C")',
        'option_b': 'df.pivot_table(rows="A", cols="B", values="C")',
        'option_c': 'df.crosstab(index="A", columns="B", values="C")',
        'answer': 'a',
        'category': 'Pandas',
        'difficulty': '中等',
        'knowledge_point': 'Pandas數據透視表',
        'question_type': '函數應用題',
        'chapter': 'Pandas數據重塑',
        'explanation': 'df.pivot(index="A", columns="B", values="C")是正確的數據透視表操作，它將A列作為新DataFrame的索引，B列的唯一值作為新的列名，C列的值作為新DataFrame的值。df.pivot_table()方法的參數是index而不是rows，是columns而不是cols。df.crosstab()是用於計算分組頻率的函數，不是用於創建數據透視表的。'
    },
    {
        'id': 49,
        'question': '以下Seaborn代碼會產生什麼類型的圖？\n\nimport seaborn as sns\nsns.heatmap(data)',
        'option_a': '散點圖',
        'option_b': '熱力圖',
        'option_c': '直方圖',
        'answer': 'b',
        'category': '資料視覺化',
        'difficulty': '中等',
        'knowledge_point': 'Seaborn繪圖函數',
        'question_type': '函數應用題',
        'chapter': 'Seaborn繪圖',
        'explanation': 'sns.heatmap()函數用於繪製熱力圖，它將數據矩陣中的值用顏色表示，通常用於可視化數據的相關性或其他數值模式。'
    },
    {
        'id': 50,
        'question': '以下Python代碼的輸出是什麼？\n\nfrom collections import Counter\nprint(Counter("banana"))',
        'option_a': "{'b': 1, 'a': 3, 'n': 2}",
        'option_b': "Counter({'a': 3, 'n': 2, 'b': 1})",
        'option_c': "['b', 'a', 'n', 'a', 'n', 'a']",
        'answer': 'b',
        'category': 'Python基礎',
        'difficulty': '中等',
        'knowledge_point': 'collections模塊',
        'question_type': '代碼執行題',
        'chapter': '標準庫',
        'explanation': 'Counter是collections模塊中的一個類，用於計數可哈希對象。Counter("banana")會返回一個Counter對象，其中包含每個字符及其出現的次數。打印這個對象時，會顯示為Counter({"a": 3, "n": 2, "b": 1})，表示"a"出現3次，"n"出現2次，"b"出現1次。'
    },
    {
        'id': 51,
        'question': '以下Pandas代碼的輸出是什麼？\n\nimport pandas as pd\ndf = pd.DataFrame({"A": [1, 2, None], "B": [4, None, 6]})\nprint(df.fillna(method="ffill"))',
        'option_a': '   A    B\n0  1.0  4.0\n1  2.0  4.0\n2  2.0  6.0',
        'option_b': '   A    B\n0  1.0  4.0\n1  2.0  NaN\n2  NaN  6.0',
        'option_c': '   A    B\n0  1.0  4.0\n1  2.0  4.0\n2  2.0  4.0',
        'answer': 'a',
        'category': 'Pandas',
        'difficulty': '中等',
        'knowledge_point': 'Pandas缺失值處理',
        'question_type': '代碼執行題',
        'chapter': 'Pandas數據清洗',
        'explanation': 'df.fillna(method="ffill")用前向填充的方法處理缺失值，即用前一個非缺失值填充當前的缺失值。在這個例子中，A列的第3行（索引2）的缺失值被填充為前一行的值2，B列的第2行（索引1）的缺失值被填充為前一行的值4。'
    },
    {
        'id': 52,
        'question': '在NumPy中，以下哪個函數用於計算兩個數組的相關係數？',
        'option_a': 'np.correlate()',
        'option_b': 'np.corrcoef()',
        'option_c': 'np.correlation()',
        'answer': 'b',
        'category': 'NumPy',
        'difficulty': '中等',
        'knowledge_point': 'NumPy統計函數',
        'question_type': '函數應用題',
        'chapter': 'NumPy統計操作',
        'explanation': 'np.corrcoef()是NumPy中用於計算兩個數組的相關係數矩陣的函數。np.correlate()用於計算兩個一維數組的互相關，np.correlation()不是NumPy的標準函數。'
    },
    {
        'id': 53,
        'question': '以下Python代碼的輸出是什麼？\n\nprint({x for x in range(10) if x % 2 == 0})',
        'option_a': '[0, 2, 4, 6, 8]',
        'option_b': '{0, 2, 4, 6, 8}',
        'option_c': '(0, 2, 4, 6, 8)',
        'answer': 'b',
        'category': 'Python基礎',
        'difficulty': '中等',
        'knowledge_point': '集合推導式',
        'question_type': '代碼執行題',
        'chapter': '高級數據結構',
        'explanation': '{x for x in range(10) if x % 2 == 0}是一個集合推導式，它生成一個包含range(10)中所有偶數的集合。因此結果是{0, 2, 4, 6, 8}。注意，集合是無序的，所以元素的順序可能不同。'
    },
    {
        'id': 54,
        'question': '在Pandas中，以下哪個方法用於對Series或DataFrame進行重新索引？',
        'option_a': 'reindex()',
        'option_b': 'reset_index()',
        'option_c': 'set_index()',
        'answer': 'a',
        'category': 'Pandas',
        'difficulty': '中等',
        'knowledge_point': 'Pandas索引操作',
        'question_type': '函數應用題',
        'chapter': 'Pandas索引',
        'explanation': 'reindex()方法用於對Series或DataFrame進行重新索引，可以改變、添加或刪除索引。reset_index()方法用於將當前索引重置為默認的整數索引，set_index()方法用於將DataFrame的一個或多個列設置為索引。'
    },
    {
        'id': 55,
        'question': '以下Matplotlib代碼的作用是什麼？\n\nimport matplotlib.pyplot as plt\nfig, (ax1, ax2) = plt.subplots(1, 2)',
        'option_a': '創建兩個獨立的圖形',
        'option_b': '創建一個包含兩個子圖的圖形',
        'option_c': '創建兩個重疊的圖形',
        'answer': 'b',
        'category': '資料視覺化',
        'difficulty': '中等',
        'knowledge_point': 'Matplotlib子圖',
        'question_type': '代碼理解題',
        'chapter': 'Matplotlib布局',
        'explanation': 'plt.subplots(1, 2)創建一個1行2列的子圖網格，返回一個圖形對象和一個包含兩個子圖對象的數組。因此，這段代碼的作用是創建一個包含兩個並排子圖的圖形。'
    },
    {
        'id': 56,
        'question': '在Python中，以下哪個是生成器函數的特徵？',
        'option_a': '使用return返回多個值',
        'option_b': '使用yield關鍵字',
        'option_c': '使用@generator裝飾器',
        'answer': 'b',
        'category': 'Python基礎',
        'difficulty': '中等',
        'knowledge_point': '生成器',
        'question_type': '概念題',
        'chapter': '函數進階',
        'explanation': '生成器函數的特徵是使用yield關鍵字而不是return關鍵字。yield會暫停函數的執行並保存當前狀態，然後在下一次調用時從暫停的地方繼續執行。Python沒有@generator裝飾器，使用return返回多個值通常會返回一個元組，而不是創建一個生成器。'
    },
    {
        'id': 57,
        'question': '以下Pandas代碼的輸出是什麼？\n\nimport pandas as pd\ndf = pd.DataFrame({"A": [1, 2, 3], "B": [4, 5, 6]})\nprint(df.apply(lambda x: x.max() - x.min()))',
        'option_a': 'A    2\nB    2\ndtype: int64',
        'option_b': 'A    3\nB    6\ndtype: int64',
        'option_c': '0    3\n1    3\n2    3\ndtype: int64',
        'answer': 'a',
        'category': 'Pandas',
        'difficulty': '中等',
        'knowledge_point': 'Pandas apply函數',
        'question_type': '代碼執行題',
        'chapter': 'Pandas數據處理',
        'explanation': 'df.apply(lambda x: x.max() - x.min())對DataFrame的每一列應用lambda函數，計算每列的最大值和最小值之差。A列的最大值是3，最小值是1，差值是2；B列的最大值是6，最小值是4，差值是2。因此結果是A    2\nB    2\ndtype: int64。'
    },
    {
        'id': 58,
        'question': '在NumPy中，以下哪個函數用於生成正態分布的隨機數？',
        'option_a': 'np.random.normal()',
        'option_b': 'np.random.gaussian()',
        'option_c': 'np.random.normaldist()',
        'answer': 'a',
        'category': 'NumPy',
        'difficulty': '中等',
        'knowledge_point': 'NumPy隨機數生成',
        'question_type': '函數應用題',
        'chapter': 'NumPy隨機數',
        'explanation': 'np.random.normal()是NumPy中用於生成正態分布隨機數的函數。np.random.gaussian()和np.random.normaldist()不是NumPy的標準函數。'
    },
    {
        'id': 59,
        'question': '在Python中，以下哪個模塊用於處理日期和時間？',
        'option_a': 'time',
        'option_b': 'datetime',
        'option_c': 'calendar',
        'answer': 'b',
        'category': 'Python基礎',
        'difficulty': '中等',
        'knowledge_point': '日期時間處理',
        'question_type': '概念題',
        'chapter': '標準庫',
        'explanation': 'datetime模塊是Python中用於處理日期和時間的主要模塊，它提供了datetime、date、time等類來表示和操作日期和時間。time模塊主要提供與時間相關的函數，calendar模塊提供與日曆相關的函數。'
    },
    {
        'id': 60,
        'question': '以下Pandas代碼的輸出是什麼？\n\nimport pandas as pd\ndf = pd.DataFrame({"A": [1, 2, 3], "B": [4, 5, 6]})\nprint(df.describe().loc["mean"])',
        'option_a': 'A    2.0\nB    5.0\nName: mean, dtype: float64',
        'option_b': 'mean    3.5\ndtype: float64',
        'option_c': 'A    2.0\nB    5.0\ndtype: float64',
        'answer': 'a',
        'category': 'Pandas',
        'difficulty': '中等',
        'knowledge_point': 'Pandas描述性統計',
        'question_type': '代碼執行題',
        'chapter': 'Pandas統計分析',
        'explanation': 'df.describe()返回DataFrame的描述性統計信息，包括計數、平均值、標準差、最小值、四分位數和最大值。df.describe().loc["mean"]選擇其中的平均值行，結果是A列的平均值2.0和B列的平均值5.0，以Series的形式返回。'
    },
    {
        'id': 61,
        'question': '以下Pandas代碼的輸出是什麼？\n\nimport pandas as pd\ndf1 = pd.DataFrame({"key": ["A", "B"], "val": [1, 2]})\ndf2 = pd.DataFrame({"key": ["A", "C"], "val": [3, 4]})\nprint(pd.merge(df1, df2, on="key", how="inner"))',
        'option_a': '  key  val_x  val_y\n0   A      1      3',
        'option_b': '  key  val_x  val_y\n0   A      1      3\n1   B      2    NaN\n2   C    NaN      4',
        'option_c': '  key  val_x  val_y\n0   A      1      3\n1   B      2    NaN',
        'answer': 'a',
        'category': 'Pandas',
        'difficulty': '困難',
        'knowledge_point': 'Pandas數據合併',
        'question_type': '代碼執行題',
        'chapter': 'Pandas數據組合',
        'explanation': 'pd.merge(df1, df2, on="key", how="inner")執行內連接，只保留兩個DataFrame中key列值相同的行。在這個例子中，只有key為"A"的行在兩個DataFrame中都存在，所以結果只有一行，包含key="A"，val_x=1（來自df1），val_y=3（來自df2）。'
    },
    {
        'id': 62,
        'question': '以下Python代碼的輸出是什麼？\n\nclass A:\n    def __init__(self):\n        self.x = 1\n        \n    def __call__(self):\n        return self.x * 2\n        \na = A()\nprint(a())',
        'option_a': '1',
        'option_b': '2',
        'option_c': '錯誤',
        'answer': 'b',
        'category': 'Python基礎',
        'difficulty': '困難',
        'knowledge_point': '可調用對象',
        'question_type': '代碼執行題',
        'chapter': '面向對象高級',
        'explanation': '當一個類定義了__call__方法時，該類的實例可以像函數一樣被調用。在這個例子中，a是A類的一個實例，a()調用了a的__call__方法，返回self.x * 2，即1 * 2 = 2。'
    },
    {
        'id': 63,
        'question': '以下NumPy代碼的輸出是什麼？\n\nimport numpy as np\na = np.array([1, 2, 3])\nb = np.array([4, 5, 6])\nprint(np.vstack((a, b)))',
        'option_a': '[[1 2 3]\n [4 5 6]]',
        'option_b': '[[1 4]\n [2 5]\n [3 6]]',
        'option_c': '[1 2 3 4 5 6]',
        'answer': 'a',
        'category': 'NumPy',
        'difficulty': '困難',
        'knowledge_point': 'NumPy數組堆疊',
        'question_type': '代碼執行題',
        'chapter': 'NumPy數組操作',
        'explanation': 'np.vstack()函數將數組沿著垂直方向（行）堆疊。在這個例子中，a和b是兩個一維數組，np.vstack((a, b))將它們堆疊成一個2x3的二維數組，其中第一行是a，第二行是b。'
    },
    {
        'id': 64,
        'question': '在Pandas中，以下哪種方法可以處理時間序列數據的重採樣(resampling)？',
        'option_a': 'df.sample()',
        'option_b': 'df.resample()',
        'option_c': 'df.timesample()',
        'answer': 'b',
        'category': 'Pandas',
        'difficulty': '困難',
        'knowledge_point': 'Pandas時間序列',
        'question_type': '函數應用題',
        'chapter': 'Pandas時間序列',
        'explanation': 'df.resample()是Pandas中用於處理時間序列數據重採樣的方法，它可以將時間序列數據轉換為不同的頻率（例如，從每日數據轉換為每月數據）。df.sample()用於隨機抽樣，df.timesample()不是Pandas的標準方法。'
    },
    {
        'id': 65,
        'question': '以下Seaborn代碼的作用是什麼？\n\nimport seaborn as sns\nsns.pairplot(data)',
        'option_a': '繪製數據中每對變量的散點圖',
        'option_b': '繪製數據中每個變量的分布圖',
        'option_c': '繪製數據中每對變量的相關係數',
        'answer': 'a',
        'category': '資料視覺化',
        'difficulty': '困難',
        'knowledge_point': 'Seaborn多變量繪圖',
        'question_type': '代碼理解題',
        'chapter': 'Seaborn繪圖',
        'explanation': 'sns.pairplot()函數用於繪製數據中每對變量的散點圖，並在對角線上繪製每個變量的分布圖。這是一種探索性數據分析的工具，可以幫助我們了解變量之間的關係和每個變量的分布情況。'
    },
    {
        'id': 66,
        'question': '以下Python代碼的輸出是什麼？\n\nfrom itertools import permutations\nprint(list(permutations("ABC", 2)))',
        'option_a': '[("A", "B"), ("A", "C"), ("B", "A"), ("B", "C"), ("C", "A"), ("C", "B")]',
        'option_b': '[("A", "B"), ("A", "C"), ("B", "C")]',
        'option_c': '[("A", "B", "C"), ("A", "C", "B"), ("B", "A", "C"), ("B", "C", "A"), ("C", "A", "B"), ("C", "B", "A")]',
        'answer': 'a',
        'category': 'Python基礎',
        'difficulty': '困難',
        'knowledge_point': 'itertools模塊',
        'question_type': '代碼執行題',
        'chapter': '標準庫',
        'explanation': 'itertools.permutations(iterable, r)返回iterable中長度為r的所有排列。在這個例子中，permutations("ABC", 2)返回"ABC"中所有長度為2的排列，即[("A", "B"), ("A", "C"), ("B", "A"), ("B", "C"), ("C", "A"), ("C", "B")]。'
    },
    {
        'id': 67,
        'question': '在Pandas中，以下哪個方法用於計算滾動窗口統計量？',
        'option_a': 'df.window()',
        'option_b': 'df.rolling()',
        'option_c': 'df.slide()',
        'answer': 'b',
        'category': 'Pandas',
        'difficulty': '困難',
        'knowledge_point': 'Pandas窗口函數',
        'question_type': '函數應用題',
        'chapter': 'Pandas時間序列',
        'explanation': 'df.rolling()是Pandas中用於計算滾動窗口統計量的方法，它可以計算移動平均、移動標準差等。df.window()和df.slide()不是Pandas的標準方法。'
    },
    {
        'id': 68,
        'question': '以下NumPy代碼的輸出是什麼？\n\nimport numpy as np\na = np.array([1, 2, 3, 4])\nprint(np.einsum("i->", a))',
        'option_a': '[10]',
        'option_b': '10',
        'option_c': '[1 2 3 4]',
        'answer': 'b',
        'category': 'NumPy',
        'difficulty': '困難',
        'knowledge_point': 'NumPy愛因斯坦求和',
        'question_type': '代碼執行題',
        'chapter': 'NumPy高級特性',
        'explanation': 'np.einsum()是NumPy中用於執行愛因斯坦求和約定的函數。"i->"表示對索引i求和，相當於np.sum(a)。在這個例子中，a的元素之和是1+2+3+4=10，所以結果是10。'
    },
    {
        'id': 69,
        'question': '在Python中，以下哪個是上下文管理器的正確用法？',
        'option_a': 'with open("file.txt") as f:\n    data = f.read()',
        'option_b': 'using open("file.txt") as f:\n    data = f.read()',
        'option_c': 'context open("file.txt") as f:\n    data = f.read()',
        'answer': 'a',
        'category': 'Python基礎',
        'difficulty': '困難',
        'knowledge_point': '上下文管理器',
        'question_type': '語法題',
        'chapter': '文件操作',
        'explanation': '在Python中，上下文管理器的正確用法是with語句。with語句可以確保文件在使用後被正確關閉，即使發生異常也是如此。using和context不是Python中用於上下文管理的關鍵字。'
    },
    {
        'id': 70,
        'question': '以下Pandas代碼的輸出是什麼？\n\nimport pandas as pd\ndf = pd.DataFrame({"A": [1, 2, 3], "B": [4, 5, 6]})\nprint(df.eval("C = A + B"))',
        'option_a': '   A  B   C\n0  1  4   5\n1  2  5   7\n2  3  6   9',
        'option_b': '   A  B\n0  1  4\n1  2  5\n2  3  6\nC = A + B',
        'option_c': '錯誤',
        'answer': 'a',
        'category': 'Pandas',
        'difficulty': '困難',
        'knowledge_point': 'Pandas表達式計算',
        'question_type': '代碼執行題',
        'chapter': 'Pandas高級特性',
        'explanation': 'df.eval("C = A + B")在DataFrame中添加一個新列C，其值為A列和B列的和。在這個例子中，C列的值是[5, 7, 9]，結果是一個包含A、B、C三列的DataFrame。'
    },
    {
        'id': 71,
        'question': '在數據分析中，以下哪個不是常見的數據清洗步驟？',
        'option_a': '處理缺失值',
        'option_b': '數據標準化',
        'option_c': '數據可視化',
        'answer': 'c',
        'category': '數據分析概念',
        'difficulty': '簡單',
        'knowledge_point': '數據清洗流程',
        'question_type': '概念題',
        'chapter': '數據預處理',
        'explanation': '數據可視化不是數據清洗的步驟，而是數據分析和呈現的步驟。常見的數據清洗步驟包括處理缺失值、處理異常值、處理重複數據、數據類型轉換等。數據標準化通常被視為特徵工程的一部分，但有時也被包括在數據清洗中。'
    },
    {
        'id': 72,
        'question': '在Python中，以下哪個函數用於生成一個序列的累積和？',
        'option_a': 'sum()',
        'option_b': 'cumsum()',
        'option_c': 'np.sum()',
        'answer': 'b',
        'category': 'NumPy',
        'difficulty': '中等',
        'knowledge_point': 'NumPy累積函數',
        'question_type': '函數應用題',
        'chapter': 'NumPy數組操作',
        'explanation': 'cumsum()是NumPy數組的方法，用於計算數組的累積和。例如，對於數組[1, 2, 3, 4]，其累積和是[1, 1+2, 1+2+3, 1+2+3+4]，即[1, 3, 6, 10]。sum()函數計算的是序列的總和，np.sum()是NumPy中計算數組元素總和的函數。'
    },
    {
        'id': 73,
        'question': '在Pandas中，以下哪個方法用於計算兩個Series或DataFrame之間的相關係數？',
        'option_a': 'correlation()',
        'option_b': 'corr()',
        'option_c': 'correlate()',
        'answer': 'b',
        'category': 'Pandas',
        'difficulty': '中等',
        'knowledge_point': 'Pandas統計函數',
        'question_type': '函數應用題',
        'chapter': 'Pandas統計分析',
        'explanation': 'corr()是Pandas中用於計算Series或DataFrame之間相關係數的方法。對於DataFrame，它計算所有列之間的相關係數矩陣；對於Series，它計算與另一個Series的相關係數。correlation()和correlate()不是Pandas的標準方法。'
    },
    {
        'id': 74,
        'question': '以下Python代碼的輸出是什麼？\n\nprint(list(zip([1, 2, 3], ["a", "b", "c", "d"])))',
        'option_a': '[(1, "a"), (2, "b"), (3, "c"), (None, "d")]',
        'option_b': '[(1, "a"), (2, "b"), (3, "c")]',
        'option_c': '錯誤',
        'answer': 'b',
        'category': 'Python基礎',
        'difficulty': '簡單',
        'knowledge_point': 'zip函數',
        'question_type': '代碼執行題',
        'chapter': '內置函數',
        'explanation': 'zip()函數將多個可迭代對象中的元素打包成元組，返回這些元組的迭代器。當可迭代對象的長度不同時，zip()會以最短的可迭代對象為準，忽略多餘的元素。在這個例子中，第一個列表的長度是3，第二個列表的長度是4，所以zip()只會處理前3個元素，結果是[(1, "a"), (2, "b"), (3, "c")]。'
    },
    {
        'id': 75,
        'question': '在Matplotlib中，以下哪個參數用於設置圖形標題？',
        'option_a': 'title',
        'option_b': 'name',
        'option_c': 'label',
        'answer': 'a',
        'category': '資料視覺化',
        'difficulty': '簡單',
        'knowledge_point': 'Matplotlib圖形設置',
        'question_type': '函數應用題',
        'chapter': 'Matplotlib基礎',
        'explanation': '在Matplotlib中，title參數用於設置圖形標題。例如，plt.title("My Title")或ax.set_title("My Title")。name和label參數在這個上下文中沒有特定的含義。'
    },
    {
        'id': 76,
        'question': '以下NumPy代碼的輸出是什麼？\n\nimport numpy as np\na = np.array([1, 2, 3])\nprint(a.dtype)',
        'option_a': 'int',
        'option_b': 'int64',
        'option_c': 'float64',
        'answer': 'b',
        'category': 'NumPy',
        'difficulty': '簡單',
        'knowledge_point': 'NumPy數據類型',
        'question_type': '代碼執行題',
        'chapter': 'NumPy基礎',
        'explanation': 'a.dtype返回NumPy數組a的數據類型。在這個例子中，a是一個包含整數的數組，所以其數據類型是int64（在64位系統上）。具體的類型可能因系統而異，但一般是int64或int32。'
    },
    {
        'id': 77,
        'question': '在Pandas中，以下哪個方法用於檢測缺失值？',
        'option_a': 'isna()',
        'option_b': 'isnull()',
        'option_c': '以上兩者都可以',
        'answer': 'c',
        'category': 'Pandas',
        'difficulty': '簡單',
        'knowledge_point': 'Pandas缺失值處理',
        'question_type': '函數應用題',
        'chapter': 'Pandas數據清洗',
        'explanation': 'isna()和isnull()都是Pandas中用於檢測缺失值的方法，它們是完全等價的。這兩個方法返回一個與原DataFrame或Series形狀相同的布爾值DataFrame或Series，其中True表示該位置的值是缺失的。'
    },
    {
        'id': 78,
        'question': '在數據分析中，以下哪種圖表最適合顯示分類數據的分布？',
        'option_a': '散點圖',
        'option_b': '柱狀圖',
        'option_c': '折線圖',
        'answer': 'b',
        'category': '資料視覺化',
        'difficulty': '簡單',
        'knowledge_point': '圖表選擇',
        'question_type': '概念題',
        'chapter': '數據可視化基礎',
        'explanation': '柱狀圖是顯示分類數據分布的最佳圖表類型，它可以清晰地展示每個類別的頻率或數量。散點圖主要用於顯示兩個連續變量之間的關係，折線圖主要用於顯示連續數據隨時間的變化趨勢。'
    },
    {
        'id': 79,
        'question': '以下Python代碼的輸出是什麼？\n\nfrom collections import defaultdict\nd = defaultdict(int)\nd["a"] += 1\nprint(d["b"])',
        'option_a': '1',
        'option_b': '0',
        'option_c': '錯誤',
        'answer': 'b',
        'category': 'Python基礎',
        'difficulty': '中等',
        'knowledge_point': 'defaultdict',
        'question_type': '代碼執行題',
        'chapter': '標準庫',
        'explanation': 'defaultdict是collections模塊中的一個類，它是dict的子類，但在訪問不存在的鍵時，會自動創建該鍵並賦予一個默認值。defaultdict(int)創建一個defaultdict，其默認值是int()的結果，即0。因此，當訪問不存在的鍵"b"時，會返回0。'
    },
    {
        'id': 80,
        'question': '在Pandas中，以下哪個方法用於根據條件篩選數據？',
        'option_a': 'filter()',
        'option_b': 'query()',
        'option_c': 'select()',
        'answer': 'b',
        'category': 'Pandas',
        'difficulty': '中等',
        'knowledge_point': 'Pandas數據篩選',
        'question_type': '函數應用題',
        'chapter': 'Pandas數據訪問',
        'explanation': 'query()是Pandas中用於根據條件篩選數據的方法，它接受一個字符串表達式作為參數，返回滿足條件的行。例如，df.query("A > 0 & B < 10")。filter()方法用於根據標籤或索引篩選行或列，select()不是Pandas的標準方法。'
    },
    {
        'id': 81,
        'question': '以下NumPy代碼的輸出是什麼？\n\nimport numpy as np\na = np.array([1, 2, 3, 4])\nprint(np.argmax(a))',
        'option_a': '4',
        'option_b': '3',
        'option_c': '[3]',
        'answer': 'b',
        'category': 'NumPy',
        'difficulty': '中等',
        'knowledge_point': 'NumPy索引函數',
        'question_type': '代碼執行題',
        'chapter': 'NumPy數組操作',
        'explanation': 'np.argmax()返回數組中最大值的索引。在這個例子中，a的最大值是4，其索引是3（因為NumPy數組的索引從0開始），所以結果是3。'
    },
    {
        'id': 82,
        'question': '在Seaborn中，以下哪個函數用於繪製分類數據的箱線圖？',
        'option_a': 'sns.boxplot()',
        'option_b': 'sns.barplot()',
        'option_c': 'sns.violinplot()',
        'answer': 'a',
        'category': '資料視覺化',
        'difficulty': '中等',
        'knowledge_point': 'Seaborn繪圖函數',
        'question_type': '函數應用題',
        'chapter': 'Seaborn繪圖',
        'explanation': 'sns.boxplot()是Seaborn中用於繪製分類數據箱線圖的函數。箱線圖顯示數據的四分位數和離群值，是一種展示數據分布的有效方式。sns.barplot()用於繪製分類數據的柱狀圖，sns.violinplot()用於繪製分類數據的小提琴圖，它結合了箱線圖和核密度估計。'
    },
    {
        'id': 83,
        'question': '以下Python代碼的輸出是什麼？\n\nimport re\nprint(re.sub(r"\\d+", "#", "abc123def456"))',
        'option_a': 'abc#def#',
        'option_b': '#abc#def#',
        'option_c': 'abc#123def#456',
        'answer': 'a',
        'category': 'Python基礎',
        'difficulty': '困難',
        'knowledge_point': '正則表達式',
        'question_type': '代碼執行題',
        'chapter': '字符串處理',
        'explanation': 're.sub(pattern, repl, string)用一個字符串替換正則表達式匹配的所有子串。在這個例子中，pattern是r"\\d+"，它匹配一個或多個數字；repl是"#"；string是"abc123def456"。因此，所有的數字序列都被替換為"#"，結果是"abc#def#"。'
    },
    {
        'id': 84,
        'question': '在Pandas中，以下哪個方法用於對時間序列數據進行頻率轉換？',
        'option_a': 'convert_frequency()',
        'option_b': 'asfreq()',
        'option_c': 'change_freq()',
        'answer': 'b',
        'category': 'Pandas',
        'difficulty': '困難',
        'knowledge_point': 'Pandas時間序列',
        'question_type': '函數應用題',
        'chapter': 'Pandas時間序列',
        'explanation': 'asfreq()是Pandas中用於對時間序列數據進行頻率轉換的方法。例如，將每日數據轉換為每月數據。convert_frequency()和change_freq()不是Pandas的標準方法。'
    },
    {
        'id': 85,
        'question': '以下NumPy代碼的輸出是什麼？\n\nimport numpy as np\na = np.array([[1, 2], [3, 4]])\nprint(np.linalg.det(a))',
        'option_a': '5',
        'option_b': '-2',
        'option_c': '-2.0',
        'answer': 'c',
        'category': 'NumPy',
        'difficulty': '困難',
        'knowledge_point': 'NumPy線性代數',
        'question_type': '代碼執行題',
        'chapter': 'NumPy線性代數',
        'explanation': 'np.linalg.det()計算矩陣的行列式。對於2x2矩陣[[a, b], [c, d]]，其行列式是ad - bc。在這個例子中，行列式是1*4 - 2*3 = 4 - 6 = -2。由於NumPy中的浮點數計算，結果顯示為-2.0。'
    },
    {
        'id': 86,
        'question': '在數據分析中，以下哪個不是描述性統計量？',
        'option_a': '平均值',
        'option_b': '標準差',
        'option_c': 'p值',
        'answer': 'c',
        'category': '數據分析概念',
        'difficulty': '中等',
        'knowledge_point': '統計概念',
        'question_type': '概念題',
        'chapter': '統計基礎',
        'explanation': 'p值不是描述性統計量，而是推斷性統計中用於假設檢驗的一個概念，它表示在原假設為真的情況下，觀察到的結果或更極端結果的概率。平均值和標準差是常見的描述性統計量，用於描述數據的中心趨勢和離散程度。'
    },
    {
        'id': 87,
        'question': '以下Pandas代碼的輸出是什麼？\n\nimport pandas as pd\ndf = pd.DataFrame({"A": [1, 2, 3], "B": [4, 5, 6]})\nprint(df.stack().shape)',
        'option_a': '(3, 2)',
        'option_b': '(6,)',
        'option_c': '(6, 1)',
        'answer': 'b',
        'category': 'Pandas',
        'difficulty': '困難',
        'knowledge_point': 'Pandas數據重塑',
        'question_type': '代碼執行題',
        'chapter': 'Pandas數據重塑',
        'explanation': 'df.stack()將DataFrame的列轉換為行，生成一個MultiIndex Series。在這個例子中，原DataFrame有3行2列，共6個元素，stack後變成一個包含6個元素的Series，其形狀是(6,)。'
    },
    {
        'id': 88,
        'question': '在Python中，以下哪個是裝飾器的主要作用？',
        'option_a': '增加函數的執行速度',
        'option_b': '修改函數的行為而不改變其源碼',
        'option_c': '減少函數的內存使用',
        'answer': 'b',
        'category': 'Python基礎',
        'difficulty': '中等',
        'knowledge_point': '裝飾器',
        'question_type': '概念題',
        'chapter': '函數進階',
        'explanation': '裝飾器是Python中的一種設計模式，它的主要作用是修改函數的行為而不改變其源碼。裝飾器可以在函數執行前後添加額外的功能，例如日誌記錄、性能測量、訪問控制等。增加函數的執行速度和減少函數的內存使用不是裝飾器的主要目的。'
    },
    {
        'id': 89,
        'question': '以下NumPy代碼的輸出是什麼？\n\nimport numpy as np\na = np.array([1, 2, 3, 4])\nb = a.view()\nb.shape = (2, 2)\nprint(a.shape)',
        'option_a': '(4,)',
        'option_b': '(2, 2)',
        'option_c': '錯誤',
        'answer': 'b',
        'category': 'NumPy',
        'difficulty': '困難',
        'knowledge_point': 'NumPy視圖與副本',
        'question_type': '代碼執行題',
        'chapter': 'NumPy數據訪問',
        'explanation': 'a.view()創建數組a的視圖b，視圖與原數組共享數據，但有自己的屬性。當我們改變b的形狀時，a的形狀也會改變，因為它們共享同一塊數據。因此，a.shape的結果是(2, 2)。'
    },
    {
        'id': 90,
        'question': '在Matplotlib中，以下哪個函數用於保存圖形到文件？',
        'option_a': 'plt.save()',
        'option_b': 'plt.savefig()',
        'option_c': 'plt.export()',
        'answer': 'b',
        'category': '資料視覺化',
        'difficulty': '簡單',
        'knowledge_point': 'Matplotlib圖形保存',
        'question_type': '函數應用題',
        'chapter': 'Matplotlib基礎',
        'explanation': 'plt.savefig()是Matplotlib中用於保存圖形到文件的函數。它可以將圖形保存為多種格式，如PNG、PDF、SVG等。plt.save()和plt.export()不是Matplotlib的標準函數。'
    },
    {
        'id': 91,
        'question': '在數據分析中，以下哪個不是常見的數據轉換方法？',
        'option_a': '標準化',
        'option_b': '歸一化',
        'option_c': '序列化',
        'answer': 'c',
        'category': '數據分析概念',
        'difficulty': '簡單',
        'knowledge_point': '數據預處理',
        'question_type': '概念題',
        'chapter': '數據預處理',
        'explanation': '序列化不是數據分析中的數據轉換方法，而是將對象轉換為可存儲或傳輸的格式的過程。標準化和歸一化是常見的數據轉換方法，用於將數據轉換到特定的範圍或分布。標準化通常指將數據轉換為均值為0、標準差為1的分布，歸一化通常指將數據轉換為[0, 1]或[-1, 1]的範圍。'
    },
    {
        'id': 92,
        'question': '以下Python代碼的輸出是什麼？\n\nclass MyClass:\n    def __init__(self, value):\n        self._value = value\n    \n    @property\n    def value(self):\n        return self._value * 2\n\nobj = MyClass(5)\nprint(obj.value)',
        'option_a': '5',
        'option_b': '10',
        'option_c': '錯誤',
        'answer': 'b',
        'category': 'Python基礎',
        'difficulty': '困難',
        'knowledge_point': '屬性裝飾器',
        'question_type': '代碼執行題',
        'chapter': '面向對象高級',
        'explanation': '@property裝飾器將方法轉換為屬性，使其可以像屬性一樣被訪問，而不需要使用括號調用。在這個例子中，value方法被轉換為屬性，當訪問obj.value時，value方法被調用，返回self._value * 2，即5 * 2 = 10。'
    },
    {
        'id': 93,
        'question': '在Pandas中，以下哪個方法用於將長格式數據轉換為寬格式？',
        'option_a': 'pivot()',
        'option_b': 'melt()',
        'option_c': 'transpose()',
        'answer': 'a',
        'category': 'Pandas',
        'difficulty': '困難',
        'knowledge_point': 'Pandas數據重塑',
        'question_type': '函數應用題',
        'chapter': 'Pandas數據重塑',
        'explanation': 'pivot()是Pandas中用於將長格式數據轉換為寬格式的方法。長格式數據是指每行包含一個觀測值的數據，寬格式數據是指每行包含多個觀測值的數據。melt()方法用於將寬格式數據轉換為長格式，transpose()方法用於轉置DataFrame（交換行和列）。'
    },
    {
        'id': 94,
        'question': '以下NumPy代碼的輸出是什麼？\n\nimport numpy as np\na = np.array([1, 2, 3])\nprint(np.tile(a, 2))',
        'option_a': '[1 2 3 1 2 3]',
        'option_b': '[[1 2 3]\n [1 2 3]]',
        'option_c': '[2 4 6]',
        'answer': 'a',
        'category': 'NumPy',
        'difficulty': '中等',
        'knowledge_point': 'NumPy數組重複',
        'question_type': '代碼執行題',
        'chapter': 'NumPy數組操作',
        'explanation': 'np.tile(a, 2)將數組a重複2次。對於一維數組，這意味著將數組的內容連接起來重複指定的次數。在這個例子中，a = [1, 2, 3]，np.tile(a, 2)的結果是[1, 2, 3, 1, 2, 3]。'
    },
    {
        'id': 95,
        'question': '在數據分析中，以下哪種圖表最適合顯示兩個連續變量之間的關係？',
        'option_a': '柱狀圖',
        'option_b': '餅圖',
        'option_c': '散點圖',
        'answer': 'c',
        'category': '資料視覺化',
        'difficulty': '簡單',
        'knowledge_point': '圖表選擇',
        'question_type': '概念題',
        'chapter': '數據可視化基礎',
        'explanation': '散點圖是顯示兩個連續變量之間關係的最佳圖表類型，它可以直觀地展示兩個變量之間的相關性和模式。柱狀圖主要用於顯示分類數據的分布，餅圖主要用於顯示部分與整體的關係。'
    },
    {
        'id': 96,
        'question': '以下Python代碼的輸出是什麼？\n\nfrom functools import reduce\nprint(reduce(lambda x, y: x + y, [1, 2, 3, 4]))',
        'option_a': '10',
        'option_b': '[1, 2, 3, 4]',
        'option_c': '[10]',
        'answer': 'a',
        'category': 'Python基礎',
        'difficulty': '中等',
        'knowledge_point': 'functools模塊',
        'question_type': '代碼執行題',
        'chapter': '函數式編程',
        'explanation': 'reduce()函數對一個序列的元素從左到右依次應用一個二元函數，將結果與下一個元素再次應用該函數，直到處理完所有元素。在這個例子中，lambda x, y: x + y是一個二元函數，它將兩個參數相加。reduce(lambda x, y: x + y, [1, 2, 3, 4])的計算過程是((1+2)+3)+4 = 10。'
    },
    {
        'id': 97,
        'question': '在Pandas中，以下哪個方法用於計算DataFrame中每列的唯一值數量？',
        'option_a': 'unique()',
        'option_b': 'nunique()',
        'option_c': 'count_unique()',
        'answer': 'b',
        'category': 'Pandas',
        'difficulty': '中等',
        'knowledge_point': 'Pandas數據分析',
        'question_type': '函數應用題',
        'chapter': 'Pandas數據分析',
        'explanation': 'nunique()是Pandas中用於計算DataFrame中每列的唯一值數量的方法。unique()方法返回Series中的唯一值，而不是計算唯一值的數量。count_unique()不是Pandas的標準方法。'
    },
    {
        'id': 98,
        'question': '以下NumPy代碼的輸出是什麼？\n\nimport numpy as np\na = np.array([[1, 2], [3, 4]])\nprint(np.trace(a))',
        'option_a': '3',
        'option_b': '5',
        'option_c': '10',
        'answer': 'b',
        'category': 'NumPy',
        'difficulty': '困難',
        'knowledge_point': 'NumPy線性代數',
        'question_type': '代碼執行題',
        'chapter': 'NumPy線性代數',
        'explanation': 'np.trace()計算矩陣的跡，即主對角線元素的和。在這個例子中，矩陣a的主對角線元素是1和4，它們的和是1+4=5，所以結果是5。'
    },
    {
        'id': 99,
        'question': '在數據分析中，以下哪個是異常值檢測的常用方法？',
        'option_a': 'IQR法則',
        'option_b': 'K-means聚類',
        'option_c': '主成分分析',
        'answer': 'a',
        'category': '數據分析概念',
        'difficulty': '困難',
        'knowledge_point': '異常值檢測',
        'question_type': '概念題',
        'chapter': '數據預處理',
        'explanation': 'IQR法則（四分位距法則）是異常值檢測的常用方法。它基於數據的四分位數，將小於Q1-1.5*IQR或大於Q3+1.5*IQR的值視為異常值，其中Q1是第一四分位數，Q3是第三四分位數，IQR=Q3-Q1是四分位距。K-means聚類和主成分分析主要用於數據降維和模式識別，雖然也可以用於異常值檢測，但不是最常用的方法。'
    },
    {
        'id': 100,
        'question': '以下Pandas代碼的輸出是什麼？\n\nimport pandas as pd\ndf = pd.DataFrame({"A": [1, 2, 3], "B": [4, 5, 6]})\nprint(df.agg({"A": "sum", "B": "mean"}))',
        'option_a': 'A    6\nB    5\ndtype: int64',
        'option_b': 'A    6.0\nB    5.0\ndtype: float64',
        'option_c': 'sum     6\nmean    5\ndtype: int64',
        'answer': 'a',
        'category': 'Pandas',
        'difficulty': '困難',
        'knowledge_point': 'Pandas聚合函數',
        'question_type': '代碼執行題',
        'chapter': 'Pandas數據處理',
        'explanation': 'df.agg()方法用於對DataFrame應用聚合函數。在這個例子中，我們對A列應用sum函數，對B列應用mean函數。A列的和是1+2+3=6，B列的平均值是(4+5+6)/3=5。結果是一個Series，其索引是列名，值是聚合結果。'
    }
]


# 創建 DataFrame
df = pd.DataFrame(quiz_data)

# 保存為 CSV 檔案
df.to_csv('quiz.csv', index=False, encoding='utf-8-sig')

print("python_numpy_quiz.csv 已成功創建！")
